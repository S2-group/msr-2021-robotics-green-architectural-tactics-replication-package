[
{"title": "[URDF-NG] Link and frame concepts", "thread_contents": ["The current version of the URDF specification has no separation between the concept of a frame of reference (i.e. a point and orientation uniquely defined in the 3D space) and of link (a physical rigid body that has a mass and a shape). In my limited experience I found that this distinction is desirable, especially in application that take into account the dynamics of a multibody system.", "In URDF there is only one concept, model by the ", " xml element, that is used to model a rigid body with a frame of reference rigidly attached to it. The common practice is then to model additional \u201cframe of references\u201d in a link as ", " xml elements without any mass or shape, attached to a \u201creal\u201d link with a fixed joint.", "While this \u201cambiguity\u201d between link and frames is convenient for software dealing just with kinematics, because reducing the number of concepts in a representation helps to reduce complexity, it is inconvenient for software dealing with dynamics, either for simulation, estimation or control. The typical pattern is that dynamics software try to understand if a URDF ", " is a real link or just a frame using heuristics, but unfortunately this heuristics are typically different from software to software. I\u2019ll try to make some examples related to this topic.", "While converting an URDF to an SDF, Gazebo automatically removes all the links connected to their parent with a \u201cFixed\u201d joint, lumping their inertial properties and collision/visual meshes in the parent. This techniques revealed several shortcomings:", "On the other hand several dynamics libraries (such Drake [3][4], Pinocchio [1] [2] or iDynTree [5] [6] ) separate the concept of frame and link, but they extract the distinction between an actual link and a fake link from the URDF in different ways. Consequently is quite difficult to write a URDF file that contains information about \u201creal\u201d link and \u201cfake\u201d links that are instead just additional frame in a way that can be parsed well by all this libraries .", "It would then be desirable for the new generation of *RDF to provide a clear and unambiguous way to define  an additional frame for a given link.", "P.s ", " I never used discourse, let me know if a discussion on this is suited to this category or not.", "References (apparently discourse is preventing me to paste more then two links, I moved them to a gist for convenience):", "\n", "\n", "\n", "Powered by ", ", best viewed with JavaScript enabled"], "thread_details": ["The implementation of such a converter is quite complex, and consequently the robustness is low. For example if several fixed joint are connected one to another the converter fails [8] .", "All the information about the \u201clumped\u201d fake links is lost: but that information could be still necessary [7] ."], "url": "https://discourse.ros.org/t/urdf-ng-link-and-frame-concepts/56"},
{"title": "[URDF-NG] Parser tools wishlist", "thread_contents": ["I have a few ideas for the \u201cnext generation\u201d of robot description format parsing tools, inspired by the recent community meeting, as well as discussions on Github and in person. This is a big, somewhat freeform brainstorm post; please reply your clarification questions, conceptual corrections, general concerns, or ideas for enhancements.", "I\u2019ll try to consistently use the following terms:", "I\u2019m also trying to keep the language agnostic to the different the paths of: making major changes to URDF, switching to using SDF across the ROS ecosystem and making some changes to SDF, or writing a new thing entirely. We haven\u2019t made a decision regarding these paths yet, and this thread is not about which specification to use, but instead architectural changes to be made to the parser library we use in ROS. One of the points I\u2019m trying to make is that I think a parser library is orthogonal to its specification and can be its own modular component. The specification is data and the parser library is code.", "Here are my major points:", "The URDF \u201cspecification\u201d refers to an outdated set of ROS Wiki pages. urdfdom is both ahead and behind the documented specification.", "The advantages of sdformat\u2019s approach to using a schema include: the ability to autogenerate documentation on ", " and a relatively minimal parser library that uses the schema for", "\nvalidation, rather than hardcoding the logic of the specification in the parser.", "One disadvantage that William brought up when we discussed this is that URDF might not actually be describable by an XML-based way of specifying the schema, or at least, not elegantly describable.", "An example clause from URDF which would be difficult to describe through an XML schema would be:", "\n\u2018The \u201climit\u201d element of the \u201cjoint\u201d element can only have \u201clower\u201d and \u201cupper\u201d attributes IF the \u201ctype\u201d of the joint is not \u201ccontinuous\u201d.\u2019", "\n(paraphrased from ", ")", "Conditions would be needed to express such clauses, which leads to a potentially messy and", "There should be support for downstream packages to provide an extension of the schema by writing a new sub-element of the schema, or an element that includes existing elements.This is a feature supported in neither urdfdom nor sdformat.", "I appreciate that SDF has a \u201cplugin\u201d element for any freeform XML that the user wants to be parsed. But a lot of custom boilerplate is needed to parse the elements out of a \u201cplugin\u201d element and check them for errors. There should be an easy way for external packages to add new elements to the schema which the parser library can validate, minimizing boilerplate and eliminating upstream changes.", "For example, consider this set of packages:", "\nPackage \u201curdf_schema\u201d provides the schema for URDF. It has no dependencies on other packages in this set.", "\nPackage \u201csensor_schema\u201d, which depends on \u201curdf_schema\u201d, provides a schema for sensors, an optional sub-element of a robot in URDF. (I don\u2019t know what the schema language will look like yet. If it looked like SDF, this package might have a file that looks like this).", "\nPackage \u201cdepth_camera_schema\u201d depends on \u201csensor_schema\u201d and describes a sensor type, an RGBD camera, which is represented as a child of \u201csensor\u201d.", "\nPackage \u201csimulation_schema\u201d describes simulation worlds, with a URDF robot element as an optional sub-element (like SDF). It depends on \u201curdfdom\u201d.", "\nOnce a piece of software includes a package with a schema extension, it can use the parser library to parse XML that follows the schema (for example, to simulate a robot with a depth camera).", "The most important challenge here is the requirement that schema extensions can insert themselves", "\ninto existing elements (e.g. adding a sensor as a sub-element of a robot) without the other packages knowing about the extension.", "\nThis may sound impossible/not a good idea, but I believe it is important to avoid users forking urdf when they want to add new possible elements of a robot that are not represented in the mainline spec.", "A possible concern about allowing more extensibility is fracturing the standard. This is a valid concern but I think that higher flexibility is worth it to allow new elements to be parsed without forking. It offers a path for new elements to be quickly implemented, distributed, and tested before they are merged into the mainstream \u201curdf_schema\u201d package. The federated model works pretty well for ROS, e.g. for message descriptions. Robot description formats could be federated in a similar way by having a common URDF schema package and schema packages further down the package tree for extending the spec.", "This point is less important than the other two, but I think it would still be a helpful feature of the parser engine. Inspired by code generation for ROS messages: auto-generate a class with accessors and mutators to the element\u2019s attributes/children, and conversion functions to/from XML for the elements described by the schema.", "SDF doesn\u2019t really do this right now; it provides ", " methods for navigating an SDF graph. Gazebo classes then retrieve information from SDF on initialization. For example, Gazebo::Joint has an SDF::Element from which it reads the child elements and attributes of the XML .", "With this new feature, the boilerplate to initialize a class from an XML element would be auto-generated, as well as the data representation itself.", "Dear Jackie,", "I very much like the idea, to have the URDF specification described by a schema and the parser be auto-generated from the schema. I\u2019ve used ", " before to this end, which provides code-generation for C++ data-types derived from XSD types as well as appropriate parsing.", "\nxsd/e (", ") seems to be a follow up to this with smaller footprint.", "\nHowever, I share William\u2019s concerns about the limited description capabilities of e.g. XSD. In particular, it was difficult / impossible to leave the order of elements unspecified while simultaneously specifying various required counts for them.", "\nOtherwise, It exactly resembles what you suggest.", "Conceptually, I think we need to distinguish between different applications: While, e.g. Gazebo, can easily manage modularity / extensibility by plugins, because appropriate new elements get directly parsed by a plugin lib ", ". I.e. Gazebo itself doesn\u2019t need to know about the detailed content of the new element.", "\nOn the other hand, typcial usage for URDF, is that an application needs to parse the XML description ", " for further use (in contrast to an instance of a base class). Hence, for an application it is not sufficient to load a plugin for parsing the element, but the application also needs to know about the data structure, the parser is parsing into.", "My proposals to urdfdom (", ") and urdf (", ") exactly allow for this: While the base liburdfdom sensor provides some convenience methods to parse any sensors, applications can request additional elements to be parsed by dynamically loaded libs (managed by pluginlib). By also publishing the header files of the corresponding data types, the application can easily access the parsed data structure.", "\nAn example for this approach can be found there: ", ".", "Sorry, I was not able to include more than two links.", "From the point of view of implementing tools, having a schema available would be a huge boost. It would lead to greater consistency and make it easier to maintain tools that need to parse URDF files.", "XSD looks pretty cool! Thanks for the link, Robert.", "Thinking about XML description vs data structure: It seems as if the in-memory data structure should mirror the format of the XML element.", "In the system I proposed in the OP (which I haven\u2019t implemented yet), the data structure gets generated by the parser and then that class would have to be injected into the user\u2019s code (the dependent package), by linking against the library compiled from the generated code. Thus the parser is imposing a data structure on the user code.", "In your proposal and implementation, the user provides the bridge between the parser and the data structure via pluginlib.", "I would summarize the tradeoff between these two approaches as: more standardization and code reuse vs. more flexibility and individual/fine-grained control.", "I\u2019m not sure which approach is better, and it\u2019s possible to support both (though it would take more engineering effort).", "Tully raised the hyperlink limit for \u201cnew\u201d users to 5, sorry about the inconvenience.", "Powered by ", ", best viewed with JavaScript enabled"], "thread_details": ["URDF refers to the URDF specification", "urdfdom refers to the parser library (yes, there is also a Python urdf parser, urdf_parser_py; just group them together for now as doing the same thing for different libraries)", "SDF refers to the SDF specification", "sdformat refers to the parser library", "A schema should be a required input to a parser", "Extensibility", "Code generation for syntactic sugar"], "url": "https://discourse.ros.org/t/urdf-ng-parser-tools-wishlist/55"},
{"title": "Do you want to add export on Onshape?", "thread_contents": ["\u2018Onshape is the first and only full-cloud 3D CAD system that lets everyone on a design team simultaneously works together using a web browser, phone or tablet. Create complex parts, assemblies, and detailed drawings all within your web browser.\u2019", "I think that Onshape is fantastic collaboration tool for ROS users when make the robot model on ROS. So we submit improvement request (add export option) to Onshape community (", "e). Please go this URL and click the follow button and vote button ", "You may want to add comment to Corporate person as it\u2019s not sufficient to use only geometry export using ROS. ROS needs both geometry and its color?", "We need its color for viewing robot on RViz (visualization) tool. ", "Goooooooooood news from Onshape official ", "\n", "We need its color for viewing robot on RViz (visualization) tool. ", "a bit off-topic maybe, but ROS ultimately uses ", " to load meshes (or at least RViz does). You should be able to use any of the formats assimp supports, besides STL, Collada and ogre formats.", "Powered by ", ", best viewed with JavaScript enabled"], "url": "https://discourse.ros.org/t/do-you-want-to-add-export-on-onshape/353"},
{"title": "[URDF-NG] Next-generation robot descriptions", "thread_contents": ["There is some ", " on how to improve the current URDF format and parsers to fill some immediate needs.", "This topic is for questioning everything and discussing what the perfect way to share and reuse information about a robot might be.", "What needs are there? What assumptions can we make?", "What is this robot we are describing? What information do we need to share?", "What counts as a robot really? For the purposes of this discussion a robot is any physical device whose interaction with the world is sensed, processed, and acted upon in an intentional manner.", "For instance, some robots can be described as a set of rigid bodies and constraints on those bodies. Others include soft bodies or flexures. Nonlinear constraints (such as joint limits) and losses (transmission inefficiency) are often known or estimated well enough that we want to include them in the description. Sometimes the constraints are simplified to the joints between bodies and described in the manner of a graph.", "Myself, I use URDF only when forced to by the tools needed for a particular project. I prefer an embeddable scripting language (lua, python) for the description. Cleaner than XML for editing and one has callback functions for non-linear or heuristic information. If you are unfamiliar with this approach,", ".", "Sounds great right? However I don\u2019t get any of the benefits of a well designed and dessiminated format.", "I see enough frustration in the world with the limitations of URDF that it\u2019s clear that there is a need for something more. What does the next generation of robot description look like?", "I have a couple of observations.", "Does the use of a scripting language provide any other benefits, such as programmable features? That would be an interesting concept.", "The lack of tools for creating and editing URDF files in a more suitable interface is the problem, rather than XML, in my opinion.", "I agree that there are nicer, more suitable interfaces for creating and editing the robot information. However, ASCII text is a format that almost everyone on almost every platform can edit. No one has to wait for the editing tool and all it\u2019s dependencies to be brought to their platform.", "A YAML format for URDF would probably be as readableandcwritable as the RBDL format you mentioned.", "I prefer YAML to XML for static data files as well. The RBDL uses the Lua programming language. (The RBDL format is Lua).", "Does the use of a scripting language provide any other benefits, such as programmable features? That would be an interesting concept.", "Yes. If the definition file is used statically and only loaded from disk, then the language can be used to encapsulate concepts, deal with repitition nicely, and increase readability. For instance, if one wanted to specify their link parameters in terms of of Denavit-Hartenberg parameters instead of xyz-rpy, one would just insert a small function at the top of the file to do the conversion.", "If the definition file is used dynamically, then one can write functions in the programming language that are called by the code using the file. For instance, one could have a joint_friction(joint_number, joint_angle, joint_velocity) hook function defined in the config file that would get called during simulation steps.", "It would be nice to have URDF\u2019s in python, like how dynamic_configure files work.", "\nThat way it is not yet another language to learn.", "\nThe robot description would be much cleaner, you could support generating the description from parameters. This is useful for highly configurable robots such as the turtlebot, which currently hack this functionality into the existing xacro/urdf system.", "We should have the gazebo people and the ROS-I people as part of the discussion.", "\n", " and I been discussing this topic for a while.  It would be good to have one format for all of the ROS / Gazebo projects.  SDF was something that we thought could be the format.  There is a long thread on this on the old google groups.", " You can see how creating URDF\u2019s in python can work in practice with ", ". I wrote when I needed to deal with non-trivial URDF\u2019s. I find working with XML directly (editing the files) unpleasant. The idea that one would write a python script to parse and execute a language embedded into xml (ie xacro), rather than just using python directly, confuses me to no end. But I\u2019ve seen colleagues invest a lot of time and frustration using xacro to try to solve the problems they have with the URDF format so I guess it makes sense to some.", "Though perhaps I\u2019m misunderstanding you. Do you mean instead that you\u2019d like to see a dynamic_configure API? A robot_model node that you can dynamically update using dynamic_configure instead of a static xml text robot_model parameter?", "Any chance you can link that thread here? Any key outcomes of the thread?", "EDIT: I think ", ".", "EDIT: It seems the general consensus is to standardize on the SDF format. That seems like a sane iteration of the current situation with ROS and Gazebo.", "That looks awesome, thanks for the link.", "Something like that is what I was looking for. I would like to see something like that become the standard way to do robot description.", "EDIT: This is a response to your first message, I didn\u2019t see your second one.", "I started this thread hoping for some discussion on, well, next generation robot descriptions. Harmonizing current formats (URDF/SDF/etc) is a really important discussion for the community; but that\u2019s really about cleaning up the current generation.", "Anyone interested in the next generation?", "That\u2019s why I brought up the Python description format.", "ROS2 replaces XML launch files with Python ones, I think that it makes sense to do something similar with URDF the other source of XML pain in the ROS ecosystem.", "Looks like your stuff generates XML and sends it out to stdout and eventually into the robot_description parameter to be used by robot_state_publisher.", "I think for the next generation of URDF, I would like to get rid of the XML entirely (if possible) and have the Python code actually act as robot state publisher and send out the description data on a latching ", " topic, as well as tf data.", "As for the actual format, I like odio_urdf but I haven\u2019t looked at it very closely.", " ", "Can we get the Gazebo team on this thread?", "Hopefully the next gen of robot descriptions is the same between ROS2 and Gazebo.", "I believe they\u2019re already listening in.", "This category grew out of the ROS Live event with robot description formats", "\nas the topic.", " has put together a nice recording as well as lots of links can be", "\nfound at: ", "I\u2019ll call out specifically the ", "\nIf you weren\u2019t there or don\u2019t have time to listen at the moment.", "Tully", "ROS industrial needs to be part of it.  I looped Paul in on this thread.", "We started a document that some of the key players commented on.", "\nProbably should push it a bit harder now if there is interest.", "This is a big", "Looks like your stuff generates XML and sends it out to stdout and eventually into the robot_description parameter to be used by robot_state_publisher.", "Yes, that code is specifically for the URDF way of describing robots. The internal hierarchy of objects mirrors the URDF elements, and each object has a string representation that matches the URDF XML.", "I think for the next generation of URDF, I would like to get rid of the XML entirely (if possible) and have the Python code actually act as robot state publisher and send out the description data on a latching /robot_description topic, as well as tf data.", "I\u2019m having a hard time picturing why one would want to do this.", "There are many uses for a robot description that have no need for ROS IPC.", "Also one could argue that the state of the robot should not be part of it\u2019s description. The ", " and ", " documentation has some nice discussion of this, though with a focus on simulation and the simbody implementation.", "I\u2019m not sure python would be an ideal choice for describing a robot. Python was not designed to be a data exchange language. In addition, web applications, which can parse XML, would have a hard time with python.", "Hi all, it seems that there is interest in figuring out what to do ASAP for ROS2, which was not the point of this thread. I\u2019ve ", " and I\u2019ll link in the external discussions mentioned above so there is a good start for that.", "It will be cleaner and clearer to ", ".", "Describing flexible link robots? Reconfigurable robots? Soft robots? Able to wrap your head around configuration languages, or why a shared object file with an API might make a good reuseable, shareable robot description? Continue below.", "I\u2019ve always found a lot of value in a non-interpreted interchange format, like URDF or SDF or even HTML or JSON. So, for me I don\u2019t like the idea of a description format that exists only in an interpreted form (like as Python or Lua).", "It\u2019s convenient to have these tools when writing the descriptions, but very inconvenient when trying to consume the description in many different places. I think a good middle ground is like what we have with xacro + URDF. You might have issues with either xacro or URDF, but I think a good idea that came out of that is to pair a well established interchange format with \u201ctemplating-like\u201d tools to make it easier to create the description by hand or programmatically. This is reflected in things like web development, where the interchange format is HTML, but commonly the server will use a scripting language to generate the otherwise tedious to specify XML content.", "We were leaning towards SDF during our discussions.", "\nand at Modbot we are all about flexible / reconfigurable robots so that", "\npart interests us.", "I\u2019ve always found a lot of value in a non-interpreted interchange format, like URDF or SDF or even HTML or JSON. So, for me I don\u2019t like the idea of a description format that exists only in an interpreted form (like as Python or Lua).", "It\u2019s convenient to have these tools when writing the descriptions, but very inconvenient when trying to consume the description in many different places.", "I think a key part of an interchange format is that it\u2019s content is very clear and easy to grasp and process by all. A simple declarative text file certainly achieves that.", "The strength of that approach is that when in inevitable need for dealing with repetitive and formulaic declarations arises, you can use xacro and I can use assembly and everyone is happy.", "So I agree there is a strong case for a non-interpreted format.", "Can you elaborate on what about an interpreted/script interchange format worries you? The second you touch ROS (or xacro) you are loading the python library, so the memory/processing overhead can\u2019t be the issue. Configuration scripts usually have a minimum of \u2018code\u2019 in them (cmake being an ugly exception) and thus a minimum of patterns or idioms that are tricky for the new user, but perhaps that is the concern?", "It\u2019s convenient to have these tools when writing the descriptions, but very inconvenient when trying to consume the description in many different places.", "I think a good middle ground is like what we have with xacro + URDF. You might have issues with either xacro or URDF, but I think a good idea that came out of that is to pair a well established interchange format with \u201ctemplating-like\u201d tools to make it easier to create the description by hand or programmatically. This is reflected in things like web development, where the interchange format is HTML, but commonly the server will use a scripting language to generate the otherwise tedious to specify XML content.", "Is this what you would choose if you had a blank slate going forward? Is there anything you would want to see change or improve?", "Can you elaborate on what about an interpreted/script interchange format worries you?", "If the data exchange (previously I used interchange, which I think is not the correct terminology now) format is a script or interpreted then everyone who uses it needs to have an appropriate interpreter loaded and any context that might be used in the script. For example, RBDL requires everyone that needs the description to have a Lua interpreter. Lua is by no means a heavy requirement, but there are plenty of platforms where that would be inconvenient at best, for example loading the description in a webpage (couldn\u2019t find a Lua vm in javascript) or iterating through the links in Matlab (couldn\u2019t find one here either), neither of which have a native way to hook into a lua interpreter. You can always parse the description lua file in C++ and then serialize the in-memory \u201cobject\u201d to send it to a browser or to Matlab, but then you just have an unofficial data exchange format.", "Even if you manage to get an interpreter at each place where you want to use the description then you\u2019re likely to need some additional context to be available at each of those places too. Because the description script can have logic in it, it\u2019s a natural extension to want to use command line arguments or environment variables or something else to modify the resulting description. You could limit this functionality, perhaps RBDL does, but this is a core utility that people use in xacro and really need to make it easier to describe robots with lots of optional configurations. If you have no static intermediate format, then this context needs to go along with the description script so it can be given to the interpreter at each end point where the description is consumed.", "The second you touch ROS (or xacro) you are loading the python library, so the memory/processing overhead can\u2019t be the issue.", "Why do you need python to touch ROS? I can write a URDF without using xacro and load it with a pure C++ library. In fact I\u2019d argue that having an intermediate format that is data only would considerably reduce cpu and memory overhead compared to an data exchange format that is interpreted, especially when being consumed in several places.", "Is this what you would choose if you had a blank slate going forward? Is there anything you would want to see change or improve?", "I would prefer an explicitly defined data exchange format for the description that is data-only (probably XML or JSON) and then pair that with a prefered templating interface (xacro, erb, empy). That way consumers of the description can remain as simple as possible and the developers who are creating the descriptions have tools to help them with authoring. It would be great to have a \u201cprefered\u201d or \u201cprescripted\u201d template engine to use, that way tools could be built to understand them, but by leaving that unspecified developers get the freedom to use whatever template engine they prefer.", "Powered by ", ", best viewed with JavaScript enabled"], "thread_details": ["Save time by not having to think about and create a project specific description. (Accompanied by the risk that the description designers made provisions to handle all aspects of a description that your project needs.)", "Share a description for reuse by others. You and the peers you are sharing with must agree on the meaning of some subset of the information in the description.", "Share a description between different softwares. By using a single description, errors introduced by data entry mistakes are eliminated. ", ".", "what else?", "Easy to create and edit across all platforms.", "Minimize difficulty in integrating the description into new codes/languages/platforms.", "A starting set of description information that is useful and whos meaning is agreed upon.", "The ability to be extended as needed with project specific info.", "The ability to be formally extended by the community as progress maches forward.", "The descriptions are primarily created by people and the one tool in common across all platforms is the text editor.", "The descriptions are primarily consumed by software.", "Any given description is usually project specific (No standard object model)", "Only my internal software reads the description, so not a lot of reuse between software.", "No reuse between peers either. As a consultant an annoying amount of my work is confidential.", "XML was intended as a language primarily for computers to work with, with human readability as a bonus. The lack of tools for creating and editing URDF files in a more suitable interface is the problem, rather than XML, in my opinion.", "A YAML format for URDF would probably be as readableandcwritable as the RBDL format you mentioned."], "url": "https://discourse.ros.org/t/urdf-ng-next-generation-robot-descriptions/222"},
{"title": "[URDF-NG] ROS2 URDF2 discussion", "thread_contents": ["What does the next version of URDF look like?", "There was", " around URDF and SDF in 2.0.", "Later a ", ". Summary ", ".", "The discussion so for seems to be leaning towards harmonizing URDF and SDF (using SDF as a foundation).", "What are the next steps? What are the important details?", "My bold position is that ROS could adopt SDF wholesale. Most, if not all, of the wishlist items for URDF2 are already captured in SDF. It would be a shame to reinvent the wheel.", "I have a feeling this idea is somewhat controversial. If so, would someone be willing to speak to potential issues associated with ROS using SDF?", "It would be a shame to reinvent the wheel.", "Didn\u2019t SDF do that, given that people were trying different ways to extend URDF already (mimic tags, srdf, etc.)? ", "Jokes aside, I think SDF\u2019s ability to have frames with multiple parents in the kinematic chains is a distinct and fundamental advantage over URDF, which happens to also be a requirement of sorts when working with physic engines. However, I do think it shows that there are appropriate situations in which yet another standard makes sense.", "If so, would someone be willing to speak to potential issues associated with ROS using SDF?", "In order to use SDF in ROS, there needs to be a way to do tf with graph (rather than tree) based kinematics, i.e. how to handle multi-parent reference frames with tf. This is brought up every time this is suggested and though some ideas have been discussed in person, there\u2019s never been a well formed proposal on how to deal with that.", "Specifically ", " and I have talked at length about spanning trees for the SDF graph and how they could be used to address this. Maybe ", " can speak to that point.", "There may be other issues, but that\u2019s the fundamental one that comes to mind for me.", "Wheels are strange beasts, and like to be reinvented. Gazebo did have an XML format for describing robots and worlds before ROS existed. In fact, URDF looks surprisingly like Gazebo\u2019s original format\u2026", "The graph issue is a good point. Adding something to SDF to break a graph into a tree sounds like a reasonable approach.", "An impopular position perhaps, but personally I would really like to see ROS2 use an established scene/robot description format if possible.", "SDF is a good improvement over URDF already, but it\u2019s still a custom format, with almost no uptake outside the ROS-Gazebo universe. I know of one (export only?) plugin for a (commercial) 3D modelling tool. Newer Gazebo versions have the model editor, but that is still limited.", "With ROS2 using an established and industry grade middleware as the foundation to build its communication abstraction on top of, it would be great to see if we can do something similar for some other key parts, the robot description format being one of them.", "So I have just consumed most, if not all, of the discussion so far (hurray for lazy Fridays) including the recording of the meeting. Here are a few observations:", "All the formats seem to have arisen from fire-fighting small problems in small problem domains rather than intentional design. Everyone participating in the last year of discussions is representing their stakeholders and their requirements; but the conversations seems to be \u201cHow can we make the current robot description techniques less broken?\u201d rather than \u201cWhat set of stakeholders and requirements will give us the best foundation for the future?\u201d", "Given the number of people volunteering to do anything, moving to and incrementing on SDF seems like the best bet.", "At the heart of a robot description, the most important thing is that the mental model, and any given element of that model, is documented in enough detail so that you, and I, and everyone else understand the context and agree on what the element is. After that we need a defined data representation, with a common, easy to implement format being nice to have.", "I\u2019m seeing a general confusion between configuration (robot A has a gripper and robot B does not) and the dynamic state of things (robot A picks up an object and we add a rigid constraint between the pose of the EE and object to represent that). There is nothing wrong with bootstrapping any dynamic models with the robot description, but they are a different thing.", "There was some discussion about moving the robot_description parameter to a latching topic. Fine idea. Outside the scope of a robot description format.", "The robot description is a storage/wire format. There is a point in time when all data retrieval and parsing is finished at which point there is a robot model in memory. What happens after that point is application specific. Declaring which end effectors are available is part of the robot description. Signaling the switching of tools or the mounting of a tool at t=0 is not part of a robot description.", "There has been some discussion on compose-ability, extensibility,  and whether a core description (or well defined sub-descriptions) should be used. Dependency hell issues were raised with regards to plugins, URI\u2019s and the like.", "I don\u2019t have anything new to add to that discussion. The core description thing seems to be an artificial issue created by assumptions about the responsibility of the tools using the description to their downstream users. The robot description should not care about those third party consumers. Any parseable and coherent subset of the robot description should be fine.", "Dependency hell is not a reason to disallow dependencies. If managing external connectivity or packaging of multiple elements is beyond your project, then you should keep everything in one file.", "There was discussion about xacro, template engines, and GUI editors. I think these are outside the scope of the robot description, beyond indicating a format that has good libraries available.", "One final observation is that while it appears that SDF is the easiest path, the SDF creators have a mental frame that constrains their thinking. Nothing wrong with that, but it\u2019s worth taking a careful survey of others using rigid body robot models. People deploying robots in experiments or the field. People transferring CAD or optimizer designs. I think most types of users have been participating in the discussions so that\u2019s good.", "In order to use SDF in ROS, there needs to be a way to do tf with graph (rather than tree) based kinematics, i.e. how to handle multi-parent reference frames with tf. This is brought up every time this is suggested and though some ideas have been discussed in person, there\u2019s never been a well formed proposal on how to deal with that.", "Specifically ", " and I have talked at length about spanning trees for the SDF graph and how they could be used to address this. Maybe ", " can speak to that point.", "I\u2019m really hitting a mental wall with why a graph topology is a problem. Which frames have multiple parents (or rather, how is it possible for a frame to have multiple parents)? Can you elaborate the problem?", "Since it\u2019s a rigid body model it seems like any spanning tree would give you a valid results. The default spanning tree via the order joints are in the file would be fine no?", "(EDITED to clarify the question)", "I\u2019m really hitting a mental wall here. Which frames have multiple parents? Can you elaborate the problem?", "Since it\u2019s a rigid body model it seems like any spanning tree would give you a valid results. The default spanning tree via the parent-child relationships would be fine no?", "I\u2019m guessing ", " is thinking of kinematic structures with cycles in them, like grippers with parallel / coupled links, delta robots, etc.", "An impopular position perhaps, but personally I would really like to see ROS2 use an established scene/robot description format if possible.", "What formats do you have in mind?", "SDF is a good improvement over URDF already, but it\u2019s still a custom format, with almost no uptake outside the ROS-Gazebo universe.", "Open source projects are difficult to track. Based on word of mouth and interactions with other people I can say that simulators, such as Moby and Drake, use SDF. Organizations like FIRST, Robocup, and NASA use SDF. There is also a solidworks to SDF exporter, and AutoCAD has expressed interest in developing their own exporter. None of this means SDF is good, but are people who rely upon SDF.", "Can you clarify what you mean by \u201ccustom format\u201d and \u201cestablished format\u201d. To me it seems that a format created for a particular project (let\u2019s say SDF and URDF) can become an established format through general acceptance. This acceptance is an indicator that a format is worth using, or improving upon. Whereas a format created by an organizing body (let\u2019s say Collada) does not make the format good.", "Newer Gazebo versions have the model editor, but that is still limited.", "Yes, it is limited. The approach has bee to develop and release incremental improvements, rather than wait until a feature complete version is ready. We\u2019d love to have help with the model editor.", "All the formats seem to have arisen from fire-fighting small problems in small problem domains rather than intentional design.", "Just to clarify, both SDF and URDF have been carefully crafted by groups of people. It\u2019s difficult to foresee all potential use cases and problems. What may seem like fire-fighting is the normal processes of incremental improvements.", "I\u2019m guessing ", " is thinking of kinematic structures with cycles in them, like grippers with parallel / coupled links, delta robots, etc.", "Yes, tf requires a tree representation, but many robot configurations can have cycles. It\u2019s also jsut a good idea to support representation of a graph as a tree.", "I would say the only other one we should consider is collada.  This is because it is an industry 4.0 standard.", "If SDF is it then we need push to get it as an industry 4.0 standard as well", "industry 4.0 standard", "What is involved in becoming an industry 4.0 standard?", "I have not looked into it.", "Paul Hvass or Shaun Edwards might know more about this.", "Gjis?", "I\u2019m guessing ", " is thinking of kinematic structures with cycles in them, like grippers with parallel / coupled links, delta robots, etc.", "Yes.", "Since it\u2019s a rigid body model it seems like any spanning tree would give you a valid results. The default spanning tree via the order joints are in the file would be fine no?", "One strategy would be to pick an arbitrary spanning tree (first in order, last in order, random, etc.). However, you could also let the user specify the spanning tree, something that ", " was pretty interested in doing. Also, when you are dealing with a distributed tf system you can easily get into a situation where two spanning trees can disagree. This isn\u2019t an issue when the description is being used in a simulation because the simulation ensures that the spanning trees agree (or at least it should) and it\u2019s able to do so because it is not distributed and it has a \u201cperfect\u201d model.", "So allowing the user to pick, with a reasonable default if they don\u2019t care, seems best. But there are a lot of details about how to represent this and communicate it in the ROS graph and in the API.", "There was some discussion about moving the robot_description parameter to a latching topic. Fine idea. Outside the scope of a robot description format.", "Both of the previous two points, by the way, are examples of why I have to disagree with your general sentiment that how the description is transmitted and used in context is out of scope. The description isn\u2019t used in a vacuum and I don\u2019t think it should be designed in one either. I do understand the desire for the format to be portable to different frameworks and therefore it\u2019s design shouldn\u2019t be unduly influenced by just one of those possible frameworks, but I think you can accomplish that while considering how it will be used if you\u2019re conscious of that fact.", "One strategy would be to pick an arbitrary spanning tree (first in order, last in order, random, etc.). However, you could also let the user specify the spanning tree, something that ", " was pretty interested in doing. Also, when you are dealing with a distributed tf system you can easily get into a situation where two spanning trees can disagree. This isn\u2019t an issue when the description is being used in a simulation because the simulation ensures that the spanning trees agree (or at least it should) and it\u2019s able to do so because it is not distributed and it has a \u201cperfect\u201d model.", "A spanning tree export is certainly possible, and something that I think we should explore. But a naive spanning tree computation will lead to significantly degraded performance of tools like tf. As mentioned, it needs to be consistent between all participants. For good performace the tree needs to be both deterministic and also consistent over time. If the tree changes topology you loose the ability to interpolate between time updates. There\u2019s also value in having the tree be similar in topology to the physical linkages since traversing fewer joints to compute a transform will result in less error accumulation.", "My opinion on what should be done in the short term has changed over the past few months. While I still find it annoying that Gazebo and ROS do not have a common format, I don\u2019t believe that switching to SDF for all ROS applications (or vice versa) makes sense, because:", "On top of these technical issues, there is the higher level decision of who decides what goes in the spec, and what the process is for that. One reason we have so many different robot description formats is that many of the interested parties prefer to have the flexibility to decide on their own what goes into a format. For TF/moveit/rviz/etc to share the same description format with gazebo (for example) people from all of those groups would need to have input into the spec. ", " would you be ok with changes to sdformat being chosen by a committee, where gazebo was only one of several participants?", "Longer term, I do think that defining a format (or set of formats) that are broadly used in the robotics community is extremely important, but I\u2019ll post some thoughts about that separately in ", "EDIT: Removed reference to \u201clong term section\u201d - I\u2019m going to post those thoughts on the next gen robot description thread.", "Switching to SDF doesn\u2019t provide most of the things that I want out of a robot data exchange format", "Do you mean the action of switching, or that there are a bunch of features/characteristics missing? If features, what\u2019s missing in SDF?", "I believe switching to any new format would require significant effort.", "\nlibsdformat has conversion from URDF to SDF, and the reverse is partially", "\ncomplete. This would make a transition less onerous.", "What are the items that SDF is missing?", "SDF elements are already chosen by committee. That committee happens to be", "\ngazebo developers. Interested parties are welcome to propose changes, and", "\ncomment on pull requests. Are you talking about a more formal committee?", " i mean the act of switching", " yes - switching to any new format would require significant effort, which is why I\u2019m suggesting not switching.", "I do mean that I the committee would have to be not just gazebo people. Yes, anyone can propose changes and offer input, but for something so crucial as a robot description format, I think that the make up of the committee that has actual decision making power should reflect the people who use it, and so if URDF switch to SDF, then i would expect the committee with decision making power for sdf to include people from developers for the various tools that now use URDF, as well as the developers for gazebo.", "To be clear I\u2019m not asking for that - I\u2019m bringing it up as an example of why I don\u2019t think we should switch from URDF to SDF.   I think that SDF is an excellent format created by engineers who know their stuff and  who have a clear application in mind that guides their decisions.", "I\u2019m still really struggling to see how the graph causes issues. Does anyone have any example cases? This feels like it\u2019s straightforward and a non-issue to me and given the people here I must be missing something.", "Here\u2019s my assumptions:", "\nLoading a graph into a tree with a hand written parser can be done with a brute force loop detection with just a few lines of code, and given the typical number of loops there is no performance problem. So no penalty for the little guy.", "\nIf one is working with a large graph structure that would cause a performance impact, then they have probably have the ability to write more elegant loop detection.", "\nAll spanning trees are equivalent and it never matters which one is given to TF.", "Where am I going wrong?", "A spanning tree export is certainly possible, and something that I think we should explore. But a naive spanning tree computation will lead to significantly degraded performance of tools like tf.", "How does the computation for breaking the loops in the graph interact with TF and change TF\u2019s performance?", "As mentioned, it needs to be consistent between all participants. For good performace the tree needs to be both deterministic and also consistent over time. If the tree changes topology you loose the ability to interpolate between time updates.", "What naive algorithms for breaking a graph into a spanning tree are not deterministic and not constant in time? Can you come up with some code that gives non-deterministic results when applied successively to the same graph or any expected evolution of that graph? Is this just a theoretical problem? (I understand a tree topology change causes a real problem).", "There\u2019s also value in having the tree be similar in topology to the physical linkages since traversing fewer joints to compute a transform will result in less error accumulation.", "How much error are you really going to accumulate (or save) on any robots in current (or in URDF2\u2019s future) use with TF, with a non-optimum spanning tree?", "I think that the rigid body assumption (or the mathematical nature of a frame) means that there is no spanning tree that is better than any other from a topological view.", "From a problem solving view there is a benefit if I can get the upstream tools to use the same spanning tree as my tools (maybe this is what you meant about matching topology to physical linkages?) and we have a solution for that in annotated graphs. I didn\u2019t see any proposals, but I would expect that a \u2018loop\u2019 element, or something similar would close the loop and all tools reading \u2018joint\u2019 elements would just naturally see the spanning tree that is the \u2018best\u2019 from the users view.", "Powered by ", ", best viewed with JavaScript enabled"], "thread_details": ["Switching existing tools that use URDF over to SDF would require a large effort. Tons of tools/libraries/etc use URDF, and switching would be non-trivial.", "Switching to SDF doesn\u2019t provide most of the things that I want out of a robot data exchange format", "As ", " and ", " have pointed out, TF and associated tools need to have a tree in order to work. There are solutions (provide a way to specify a root node for the tree, or to specify the entire tree), but my feeling is that this is only the first of many edge cases that would be run into.", "The existing tools for taking a robot described by a URDF, converting it to SDF, and spawning it in gazebo work \u201cwell enough\u201d for me.", "This isn\u2019t just a question of urdf/sdf. On top of those I have an SRDF for moveit, yaml files for describing other robot-specific formats that aren\u2019t in any spec yet, etc."], "url": "https://discourse.ros.org/t/urdf-ng-ros2-urdf2-discussion/511"},
{"title": "Project: Better workflow for robot descriptions - URDF/XACRO", "thread_contents": ["Update 2017-03-21: We have now closed the survey. Thanks to everyone who participated ", "Dear members of the ROS community,", "We are two Software Engineering students at the IT University in Copenhagen, who are doing our master thesis on the ROS framework. We are looking into how to improve the workflow for creating and editing robot descriptions (URDF/XACRO) for improved usability and correctness.", "If you have any experience with robot descriptions (URDF/XACRO), we really hope you will spend 3 minutes answering this questionnaire:", "\n", "Thank you so much in advance ", "Also: You can leave your contact info in the questionnaire, if you would like to give feedback to the solution, we\u2019re working on.", "Best regards", "\nCarsten Wrobel and Susie Agerholm Balle", "Powered by ", ", best viewed with JavaScript enabled"], "url": "https://discourse.ros.org/t/project-better-workflow-for-robot-descriptions-urdf-xacro/1427"},
{"title": "Some problems of conversion of xacro to urdf", "thread_contents": ["This kind of question is best asked on ", ", discourse is best used for general discussion, see:", "Thanks for your question. However, please ask your question on ", " following our support guidelines: ", "  ROS Discourse is for news and general interest discussions. ", " provides a forum which can be filtered by tags to make sure the relevant people are included and not overload everyone.  Also please ready through the ", ". In particular please provide enough background to reproduce your problem, including you\u2026", "and", "Powered by ", ", best viewed with JavaScript enabled"], "url": "https://discourse.ros.org/t/some-problems-of-conversion-of-xacro-to-urdf/1669"},
{"title": "URDFDOM_PY missing from the KINETIC Distro?", "thread_contents": ["Hi,", "\nI recently installed ROS KINETIC under Ubuntu 16.04 LTS for a course in Robotics I am taking.", "\nOne of the course projects requires the use of said package to parse a URDF file.", "\nThe CMAKE for the project failed, unable to find this package. The ROS WIKI seems to state that the package is maintained and released for Kinetic. I could not find the package under my ROS installation.", "\nAny suggestions / advice ?", "\nThanks", "\nShai", "Hi Shai,", "This question should be asked in ", "\n", " is used for news and general discussions.", "Please refer to the ROS community support guidelines", "\n", "Potential ROSAnswer related to your question:", "\n", "GitHub Sources for urdfdom:", "\n", "urdfdom - URDF parser", "\n", "\n", "urdf_parser_py - Standalone URDF parser for Python.", "\n", "\n", "urdfdom_headers - Headers for URDF parsers", "\n", "I have ros-kinetic-urdfdom-py 0.3.3 available in my apt cache, with repo:", "\ndeb ", " xenial main", "Run apt update and double-check your sources list.", "Cosmo", "ros-kinetic-urdfdom-py 0.3.3", "Hi Cosmo,", "\nThanks for your prompt answer. Sorry for posting my question here - it\u2019s my first question in ROS, and it seems an appropriate place\u2026", "\nAnyhow, I cloned this package from its formal git repo into my catkin workspace and after some tweaking it compiles fine.", "\nThanks,", "\nShai", "Powered by ", ", best viewed with JavaScript enabled"], "url": "https://discourse.ros.org/t/urdfdom-py-missing-from-the-kinetic-distro/1957"},
{"title": "Robot Description Tools and Formats @ ROSCon 2017", "thread_contents": ["Hi everyone,", "I was thinking of submitting a proposal to ROSCon 2017 for a presentation on the state of ", ", the robot model editing tool based on Blender I\u2019ve been developing on and off over the last years, also talking about our thoughts on the future of ", " and other ideas and requirements for formats we\u2019ve come up with in various projects at the ", " here in Germany.", "I\u2019ve also been following the discussion on the future of robot description formats in both ROS 1 and 2 here and in the various other linked channels, again, on and off, and I feel most people have been doing the same, with the last \u201cwave of interest\u201d rising and subsiding last fall. So as far as I can see, it is still an unsolved topic, and thus I was thinking of incorporating it in my proposed talk, trying to to provide a summary of the relevant points raised in discussion so far and compiling a list of the mentioned requirements and possible ways to go forward.", "My hope is obviously that this would bring this topic back on people\u2019s minds, we could maybe get together for a birds-of-a-feather-meeting afterwards and thus possibly finally start a community effort to really go forward with this.", "So my question: Would you like to see such a talk and would you be interested in organizing a birds-of-a-feather or even more \u2018formal\u2019 meeting on the topic at ROSCon 2017? And if so, which specific points would you like to see raised?", "Cheers,", "Kai", "Sounds like an interesting talk and I\u2019m pretty sure there will be a bunch of people interested in joining the discussion.", "Powered by ", ", best viewed with JavaScript enabled"], "url": "https://discourse.ros.org/t/robot-description-tools-and-formats-roscon-2017/2025"},
{"title": "Transparency in Gazebo with XACRO", "thread_contents": ["I tried to display transparent boxes in Gazebo with XACRO. The box_color is rendered properly in RVIZ, however Gazebo/GreyTransparent is only Grey, not transparent in Gazebo.", "Is it actually possible to make it transparent in Gazebo with XACRO?", "Powered by ", ", best viewed with JavaScript enabled"], "url": "https://discourse.ros.org/t/transparency-in-gazebo-with-xacro/3215"},
{"title": "SDF Joint/Link additional info (Electronics + Mechanical fit)", "thread_contents": ["I am working on an application to make it easier to cooperate on open robotics hardware. In order to keep track of what (still) fits together I need a way to store information about how the mechanical parts attach together and what electrical requirements and capabilities that a module/link have. It would be great if i could append this information to a SDF model of a robot without violating the standard.", "Any suggestions?", "Powered by ", ", best viewed with JavaScript enabled"], "url": "https://discourse.ros.org/t/sdf-joint-link-additional-info-electronics-mechanical-fit/3647"},
{"title": "Common location for sensor URDF files?", "thread_contents": ["For example, in ", " there are ", " that are enough for ROS usecases (and for visualizing on Gazebo too). Failing to find so far a robot-agnostic location where I can get Kinect models, I\u2019ve been reluctantly depending on ", " from my robot packages just to use those models.", "Is there already a good to way to avoid bizarre dependency like above? Or if there isn\u2019t, what we can do to amend this?", "I thought we may want to create a sensor description package, maybe somewhere close to its driver. For example for Kinect it may be like in ", " (need more discussion for the specific location of course).", "Also available on Gazebo are some sensors\u2019 ", "s, which cannot reversibly be used in ROS AFAIK. So IMO this can\u2019t be an option.", "I agree with you we need more sensor description package.", "\nThere was a discussion on this on the SIG driver group : ", "Here is the conclusion that I like from Jack O\u2019Quin", "For most devices, I think it makes sense to distribute the foo_description as a separate package in the same repository as the foo_driver.", "Of course, some generic drivers, like camera1394 or usb_cam, have no idea what the actual device looks like. There are thousands of IIDC or USB camera models. I suppose they could provide a generic box with a lens, but what\u2019s the point? That could legitimately go somewhere else.", "For example, there should be a new package named realsense_description in ", "For commonly-used sensors like the Kinect or SICK laser scanners, I wholeheartedly agree with having a description package I can install and use without needing to bring in an entire robot description.", "Thanks for the helpful inputs.", "I made a PR to ", " repository to add ", " package. ", ". Review is welcomed.", "\nEssentially this package only contains a xacro for Kinect. I\u2019m afraid this setting may be a bit of overkill, but not entirely sure. Let\u2019s see.", "Hi\u2026While URDFs are a useful and standardized format in ROS, they are lacking many features and have not been updated to deal with the evolving needs of robotics. URDF can only specify the kinematic and dynamic properties of a single robot in isolation. URDF can not specify the pose of the robot itself within a world. It is also not a universal description format since it cannot specify joint loops, and it lacks friction and other properties. Additionally, it cannot specify things that are not robots, such as lights, heightmaps, etc.", " I hear that discussion often, but this thread is not for that.", "Powered by ", ", best viewed with JavaScript enabled"], "thread_details": ["They get released together, so they remain in sync with support for new models, etc.", "Their dependencies remain separate.", "They can be installed on different machines, useful if the driver can run on a small headless controller."], "url": "https://discourse.ros.org/t/common-location-for-sensor-urdf-files/1758"},
{"title": "Support the PLY geometry format in URDF?", "thread_contents": ["Hello! I posted over ", ", but this place seems to be a bit more active.", "At the moment, the URDF spec only seems to mention Collada / DAE and STL file formats for the mesh node. STL, however, doesn\u2019t support a very robust set of data and Collada is pretty inefficient in terms of file size and pretty complicated to export. What are peoples thoughts on including something like the PLY format as an option for a mesh node file format?", "Thoughts? Thanks!", "\nGarrett", "Without being familiar with 3D modle formats, I\u2019d say someone would need to give the point of view from the libraries that use these files. I\u2019m thinking of:", "If they already have support for it, sounds great! If they don\u2019t, a newer version of URDF should at the same time support these big players I guess.", "Sounds reasonable. I\u2019m less familiar with the ROS codebase, myself, but I\u2019ve noticed some references to ", " around the ROS repos, and ", " (in the bullet physics repo?) has discussions around gazebo using assimp to load models, as well.", "If that\u2019s true, then this may be as simple as extending the spec to include another model format. I\u2019d almost suggest just allowing anything that assimp can load (if it\u2019s actually that easy), but I actually like the constrained list of formats because that makes it easier to consume the format on other platforms (we\u2019re visualizing these models using THREE.js and javascript, as well). To me, all that\u2019s missing is a simple to export, terse, binary geometry format.", "Thanks!", "\nGarrett", "It will not help to improve the state-of-the-art wrt supported features, but in some testing I did a few months ago it turned out that you can use just about anything that Assimp supports for meshes in urdfs. In the end it all gets converted to vertices & faces anyway, so as long as Assimp can load your mesh it should work.", "IIRC I even used ", " at some point.", "Note that this is really just about meshes, so none of the \u2018advanced\u2019 features formats like Collada and FBX support are used (bones, skins, kinematics, simulation properties, etc).", "I did not include Gazebo in these tests, so that may be different.", "Collada is pretty inefficient in terms of file size", "Collada has a variant where the whole file is compressed using gzip, the extension changes to ", " and it typically results in 90% reduction in file size. It supports all of the things you mentioned, but it is definitely not meant to be human readable and is not straightforward to export to without a library doing it for you.", "in some testing I did a few months ago it turned out that you can use just about anything that Assimp supports for meshes in urdfs", "Great! That\u2019s more or less what I was expecting. So it sounds like this is more a matter of documentation than anything else. Unless there\u2019s a serious reason not to expand the documented mesh formats, this could be as simple as just adding an extension to the list on the URDF wiki page!", "Collada has a variant where the whole file is compressed using gzip, the extension changes to .zae and it typically results in 90% reduction in file size.", "I\u2019d heard of ", " before, but it also wasn\u2019t listed on the URDF wiki as a suitable format. I\u2019d say it\u2019s worth adding that, as well, if it\u2019s considered a valid format. In a quick test, it looks like PLY is able to get down a bit lower than the zipped collada file, but I understand what you\u2019re getting at.", "The reason I\u2019m asking for documentation updates is because, like I said, we\u2019re looking into generating URDF models and visualizing them in the browser and other platforms outside of ROS because it\u2019s a nice, documented, and standard format that\u2019s easy to parse and export. I feel that the density, robustness, and simplicity of use of the PLY format scratches that last itch that isn\u2019t afforded by the other two mesh formats. I\u2019m open to other format suggestions that scratch that, too, though!", "Overall I\u2019m pretty happy with URDF \u2013 I\u2019m just trying to help the standard grow in a couple ways that accomodate my use cases! Especially if there\u2019s not a lot of work investment to make it happen.", "Thanks for your feedback!", "\nGarrett", "Powered by ", ", best viewed with JavaScript enabled"], "thread_details": ["Supports a binary format type, which enables to smaller file sizes.", "Optionally supports texture coordinates so the ", " tag can be used for a surface texture.", "Optionally supports normals and vertex colors (and any other custom vertex attribute) for other color and shading.", "Extremely simple to write an importer / exporter for.", "\n", ". Haven\u2019t found much.", "\n", ". Their tutorial just talks about exporting to .dae/", "Collision computation libraries like ", " which I believe is used in MoveIt."], "url": "https://discourse.ros.org/t/support-the-ply-geometry-format-in-urdf/4325"},
{"title": "Add attribute to indicate if a mesh is a convex hull?", "thread_contents": ["Would the maintainer be open to adding an an attribute to the mesh tag indicating if the mesh is a convex hull? The default would be false.", "The use-case here is to utilize this information in planners / collision checkers that can enable certain optimizations when the meshes they are passed are convex. One example would be FCL, which has optimized implementations for convex-convex algorithms. (Comment on GitHub by gavanderhoorn)", "Not a URDF maintainer here, just interested by-stander.", "Wouldn\u2019t the elegant approach be to extend any collision checker that supports such optimized checks with a checking function that evaluates whether a given mesh is convex? Like that, the checker could decide whether or not to run the algorithms optimized for convex meshes upon loading of the meshes.", "Wouldn\u2019t the elegant approach be to extend any collision checker that supports such optimized checks with a checking function that evaluates whether a given mesh is convex? Like that, the checker could decide whether or not to run the algorithms optimized for convex meshes upon loading of the meshes.", "That would be expensive to check. It only has to be done while loading the URDF of course, so that might not be a huge problem.", "However, isn\u2019t the issue tracker a better place discuss this? This thread here has to risk of splitting the discussion between there and here.", "However, isn\u2019t the issue tracker a better place discuss this? This thread here has to risk of splitting the discussion between there and here.", "I think enhancements might get better discussion on this discourse category, so I\u2019ve been recommending people post here. If not here, then I\u2019m not sure which issue tracker would be best. There are several with code that might need to be updated.", "I think enhancements might get better discussion on this discourse category, so I\u2019ve been recommending people post here. If not here, then I\u2019m not sure which issue tracker would be best. There are several with code that might need to be updated.", "Fair enough. Added a link in your issue pointing here.", "You could perform this check but you may have issues depending on how the data is saved. If the data is saved with floating point precision and you check it with double precision you could get a false positives. Also I don\u2019t think in the case of collision checking you what the software to make this decision. I think it is better if it is explicitly defined by the user.", "Thanks for the detailed response. I was not aware of issues caused by the encoding of the meshes. Interesting.", "Regarding your original request, I ", " think that this is an application-specific detail and would model it through ROS parameters. This strikes me as the \u201cmost KISS\u201d approach.", "However, you only add information that relates to the robot model. So, a case can also be made that the URDF is the most specific (and hence suitable) place to put.", "I\u2019d like to point out that then you can get into issues of keeping the information consistent: There can be concave meshes that are marked as convex --what does the software do? But maybe that is a case of \u2018garbage in, garbage out\u2019.", "In conclusion, I wouldn\u2019t do it, but I see where you are coming from. ", "Regarding your original request, I personally think that this is an application-specific detail and would model it through ROS parameters. This strikes me as the \u201cmost KISS\u201d approach.", "It might be good to keep non-ROS consumers of URDF in mind as well. Ideally they would have access to this \u2018meta\u2019 information too. Encoding it as an attribute makes that straightforward. ROS parameters do not.", "It would also avoid fragmenting the necessary information to successfully parse a URDF. Fragmentation like that is common in other areas of ROS already (MoveIt fi: joint limits from urdf, but also from config yaml, can be overridden with parameters and there\u2019s some dynamic reconfigure parts as well).", "Note that other formats already support explicitly marking meshes as convex, or that capsules should be used for collision detection/physics, and they use similar approaches (attributes or a different tag/element/entity).", "Thanks for the detailed answer! I was not aware that other formats already support such a tag. Good to know.", "I would prefer to encode the collision information in the urdf even if it is a new tag. Given that it provides a section for collision geometry I would assume it would be good to support a variety of collision geometry types. A detailed mesh is usually not the ideal geometry for a collision geometry. It would be nice to expand this to not only support convex hull type but Multi-Sphere, Octomap, Point Cloud, Signed Distance Field, etc which are more suitable for collision checking. I am hoping for an answer soon as I have a deadline. If this is not something of interest to be added to this repository I will need to proceed with creating my own variant to be released with a new motion planning package.", "This seems reasonable as long as the default behavior  (when the tag isn\u2019t available) remains the same as it is today. This seems like it would be true, but has anyone verified this to be the case?", "I propose adding a few more tags.", "convex_hull - This would accept mesh formats along with pcd", "mulit_sphere -  This would except pcd that incodes the radius at each point", "octomap", "sdf", "Powered by ", ", best viewed with JavaScript enabled"], "thread_details": ["\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n"], "url": "https://discourse.ros.org/t/add-attribute-to-indicate-if-a-mesh-is-a-convex-hull/4479"},
{"title": "Some-one should work on plugin which export URDF from xacro/Solidworks. wouldn't that be nice?", "thread_contents": ["There are many issues with SolidWorks to URDF plugin, and there is not support. Anybody has view on this!", "I\u2019m not entirely sure what you\u2019re asking. What is SW? SolidWorks?", "Solidworks to URDF and had many problems with meshes coordinates, and some other problems. The plugin is not being supported. So, there is need of plugin which can convert SolidWorks, Autocad, Xacro\u2026etc to URDF. The complex robots are being developed, there should some easy way to do simulation on that.", "Hello there,", "I am the originator of the SW2URDF SolidWorks add-in. I understand that there are several issues with the add-in as it currently exists. If you have any specific issues that you\u2019ve with it, I would be happy if you made bug reports or add comments to bug reports on the bitbucket page (", "). I also welcome pull requests.", "I have been working on the add-in, and will have some important bug fixes to introduce soon.", "Stephen", "Hi ", " we created some time ago a tutorial to convert complex models from Solidworks to URDF without having to use the plugin, but using instead Blender.", "\nHave a look to ", ", it may help you", "Powered by ", ", best viewed with JavaScript enabled"], "url": "https://discourse.ros.org/t/some-one-should-work-on-plugin-which-export-urdf-from-xacro-solidworks-wouldnt-that-be-nice/6029"},
{"title": "CATIA V5 DAE and URDF exporter", "thread_contents": ["I am working on a CATIA V5 DAE and URDF exporter. I am wondering if anyone else has created a converter from one of the popular \u201cindustrial\u201d grade CAD systems. Are there any suggestions, hints, or tips for the best possible conversion.", "If I output DAE triangles, trifans, and tristrips elements \u2026 that will be able to be imported into RVIZ and Gazebo as optimized primitives?", "Many many years ago, I wrote a converter for the output of ", ". It has largely not been maintained, but the ", ".", "The most direct path would be to output individual meshes for each piece of your model and then link them together with a URDF.", "David,", "That is how the code is spec\u2019ed. Thanks for confirming the direction.", "\nThanks for the link. I will take a look at it this evening.", "Robert", "Got the link translation working. Starting on the joint translation tomorrow. Looks like it should be smooth sailing from here on the URDF translator.", "Powered by ", ", best viewed with JavaScript enabled"], "url": "https://discourse.ros.org/t/catia-v5-dae-and-urdf-exporter/6853"},
{"title": "SDFormat: Pose Frame Semantics Proposal", "thread_contents": ["Howdy!", "I am robotics software developer for ", ", part of the team working towards ", ". For the past few months, I have been working with ", " and ", " at OSRC to start improving the documentation for the full specification for SDFormat, which can be seen ", ". We are using this as a launching point to extend SDFormat with a ", ", which aims to improve expressivity by enabling the definition of arbitrary coordinate frames within a model and choosing the frame relative to which each frame is defined. This is something that I, as part of TRI, would like for ", ", and something that we hope is useful for the ROS and Gazebo communities.", "If you have any high level questions about this proposal that don\u2019t necessarily fit in as a ", ", please feel free to ask here. If you have more specific questions, please consider ", " with suggested changes to enable discussion on BitBucket\u2019s review interface.", "If you\u2019re curious about other discussions that have not yet been merged into the SDFormat documentation website, you can view ", ".", "Thanks!", "P.S. Not all discussions happen on a publicly visible forum, but we are trying to distill the main points of those discussions in the proposals to make them discoverable / traceable. Additionally, the proposal process for SDFormat is still a bit ad hoc and has not yet been fully formalized (e.g. ", ").", "P.P.S. This has been ", ".", "First of all, thanks a lot ", " ", " ", "  for working on this. Personally I hoped to use SDF for non-Gazebo use for a long time to avoid several URDF limitations (see ", ").", "I have a few questions related to PR that have been already merged, so as you suggest I will post them here.", "I think this improved features are quite impactful, and in a sense are not \u201cbackward compatible\u201d, in the sense that an SDF 1.6 valid model may not be a valid SDF 1.7 . While this is true also for past SDF version, did you think of naming the new format SDF 2.0, to better convey the fact that is quite an improved format?", "Removing the ", " is a great improvement that drastically simplifies the SDF specs, and simplify its use (see for example the discussion in ", "). However, the tag is currently still used in the URDF loader in SDFormat (see ", "). The idea is to provide an automatic updater also for the migration from 1.6 to 1.7 ? Ideally the URDF <\u2013> SDF convert should transform URDF \u201cfake\u201d links to proper SDF frames instead of simply removing them (see ", " and ", "), but that would probably mean that we  need to modify the URDF <\u2013> SDF converter to target SDF 1.7", "Ideally the URDF <\u2013> SDF convert should transform URDF \u201cfake\u201d links to proper SDF frames instead of simply removing them (see ", " and ", "), but that would probably mean that we need to modify the URDF <\u2013> SDF converter to target SDF 1.7", "This exact issue started bugging me in some simulations I was trying to do and it converted me into writing the robot description in SDF instead of URDF and converting it to URDF later. But I think the issue with \u201cfake links\u201d is more of an issue of trying to create a link in Gazebo that is not static without any physical properties, maybe that would require some changes in the simulator itself.", "\nI added a ", " and a ", " converters in the package I have been working on and it required some computation so the poses would be consistent in both formats.", "\nOne of the things that I wish could be done is to express the orientation in the ", " as a quaternion as well, though.", "But I think the issue with \u201cfake links\u201d is more of an issue of trying to create a link in Gazebo that is not static without any physical properties, maybe that would require some changes in the simulator itself.", "Probably this is a bit OT, but nevertheless: if a \u201clink\u201d does not have any physical properties, probably it does not make a lot of sense to call it \u201clink\u201d, but \u201cframe\u201d would be a more proper term to refer to it? This is indeed the spirit of the SDF 1.7 proposal, as far as I understand.", "I added a ", " and a ", " converters in the package I have been working on and it required some computation so the poses would be consistent in both formats.", "Those scripts seems to be really great, thanks for sharing! Do you plan to release a ROS-independent version?", "Probably this is a bit OT, but nevertheless: if a \u201clink\u201d does not have any physical properties, probably it does not make a lot of sense to call it \u201clink\u201d, but \u201cframe\u201d would be a more proper term to refer to it? This is indeed the spirit of the SDF 1.7 proposal, as far as I understand.", "Definitely! Frame is the correct syntax and I am glad it is in the proposal. I can think of numerous cases where frames disassociated from physical links would be handy, but always needed a work around to get done in Gazebo.", "Those scripts seems to be really great, thanks for sharing! Do you plan to release a ROS-independent version?", "I have been thinking about it, especially because one of the ideas of the package is to make it possible to design and preview the simulation scenario via Python in Jupyter notebooks and setting up the package dependencies via ", " for Python 3 is currently tricky.", "I think this improved features are quite impactful, and in a sense are not \u201cbackward compatible\u201d, in the sense that an SDF 1.6 valid model may not be a valid SDF 1.7 . While this is true also for past SDF version, did you think of naming the new format SDF 2.0, to better convey the fact that is quite an improved format?", "The proposal initially called for SDF 2.0 as there are some restrictions added to the naming rules for sibling element, but the bigger changes are the semantics for the ", " element and the ", " attribute. Since the spec is backwards-compatible with respect to these changes (a 1.7 file without ", " or ", " has the same kinematics as if it were a  1.6 file), it seemed more like a minor than a major release. That was are reasoning, and we are open to further feedback on the matter.", "One of the things that I wish could be done is to express the orientation in the ", " as a quaternion as well, though.", "There is an open pull request in urdfdom_headers to allow quaternions to be specified in poses ( ", " ), but changes to urdfdom have been slow as the parser doesn\u2019t have a concept of versions in urdf. We could consider adding pose quaternions to SDFormat. Do you have any thoughts about what the syntax should look like?", "Removing the ", " is a great improvement that drastically simplifies the SDF specs, and simplify its use (see for example the discussion in ", "). However, the tag is currently still used in the URDF loader in SDFormat (see ", ").", "Independently of this proposal, I think we should update parser_urdf to set sdformat version 1.5, which would avoid the ", " tag. Does it only require changing that one line?", "Independently of this proposal, I think we should update parser_urdf to set sdformat version 1.5, which would avoid the ", " tag. Does it only require changing that one line?", "There are a few more lines (related on how the axis is computed at ", ").", "\nFor more details, see the dedicated issue at ", ", that I totally forgot I opened. ", "FYI Related to the removal of ", ", I\u2019m concerned about the complications for migration. I\u2019m trying out the newer stuff in Drake now: ", "Posted a proposal update here:", "\n", "* Initial\n* Update pose frame proposal to support //xyz\\[@expressed\\_in\\]\n\n\u200c\n\nPreview:...", "\n", "Please weigh in you feel strongly for / against it. That being said, I agree with Steve\u2019s suggested solution to use a later SDFormat version. (Ideally, once we iron this out, perhaps it could use SDFormat 1.7 once it\u2019s usable in Gazebo?)", "Powered by ", ", best viewed with JavaScript enabled"], "thread_details": ["Version number", "Removal of ", "\n", "Version number", "Removal of ", "\n"], "url": "https://discourse.ros.org/t/sdformat-pose-frame-semantics-proposal/9852"},
{"title": "About the robot description formats category", "thread_contents": ["This category is for discussing robot description formats and the surrounding tools:", "Powered by ", ", best viewed with JavaScript enabled"], "thread_details": ["URDF", "SDF", "parsers and robot_model tools", "Solidworks and other CAD tools exporters", "The next generation?"], "url": "https://discourse.ros.org/t/about-the-robot-description-formats-category/27"}
]